package API_VootKids;

import static org.hamcrest.Matchers.is;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.log4j.BasicConfigurator;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;
import org.hamcrest.core.IsNull;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.config.EncoderConfig;
import com.jayway.restassured.http.ContentType;
import com.jayway.restassured.response.Response;

import API_VootKids.GenericMethod;

public class SignUp extends GenericMethod
{
	static String str;
	static String key2test;
	static String Value2test;
	static String TestType;
	static SoftAssert softAssert = new SoftAssert();
	@Test
	public void SignUp_Kids() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		RestAssured.config = RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false));
		//calling genericMrthod for SignUp
		GenericMethod g=new GenericMethod();
		Response resp=	g.SignUp();
		//printing the response
		resp.prettyPrint();
		
		//Reading the excel sheet
		FileInputStream fis=new FileInputStream(path1);
		Workbook wb=WorkbookFactory.create(fis);
		//Excel sheet name Create
		Sheet sh=wb.getSheet("SignUp");
		//count the no. of rows ignoring the 1st row
		int rowCount = sh.getLastRowNum()-sh.getFirstRowNum();
		
	    //started for loop
	    for(int i=2; i<=rowCount;i++)
        {
	    	
            	Row row = sh.getRow(i);
            	//fetching the cell values
            	String password=row.getCell(3).getStringCellValue();
            	String deviceId=row.getCell(4).getStringCellValue();
        		String deviceBrand=row.getCell(5).getStringCellValue();
        		String pin=row.getCell(6).getStringCellValue();
        		//If pin is empty
        		if(pin.equals("EMPTY"))
        		{
        			pin="";
        		}
        		TestType=row.getCell(0).getStringCellValue();
        		String URL=row.getCell(7).getStringCellValue();
        		key2test=row.getCell(8).getStringCellValue();
        		Value2test=row.getCell(9).getStringCellValue();
            	String email=row.getCell(2).getStringCellValue();
            	//if email is passed as empty
            	if(email.equals("EMPTY"))
				{
					email="";
				}
            	//Code to get autogenerated email
				else if(email.equals("AUTO"))
				{
					email=g.emailGenerator();
					System.out.println(email);
				}
            	//If email not pass in request
				else if(email.equals("NOTPASS"))
				{
					SignUp.NotPassEmail(password, deviceId, deviceBrand, pin,i, URL);
					continue;
				}
            	//When password is empty
            	if(password.equals("EMPTY"))
				{
            		password="";
				}
            	//When password is not passed
            	else if(password.equals("NOTPASS"))
				{
            		SignUp.NotPassPassword(email, deviceId, deviceBrand, pin, i, URL);
            		continue;
				}
            	//If device id is passed as empty
            	if(deviceId.equals("EMPTY"))
				{
        			deviceId="";
				}
            	//When deviceId is not passed
            	else if(deviceId.equals("NOTPASS"))
				{
        			SignUp.NotPassdeviceId(email, password, deviceBrand, pin, i, URL);
        			continue;
				}
            	//If device brand is empty
            	if(deviceBrand.equals("EMPTY"))
				{
        			deviceBrand="";
				}
            	//If device brand is not passed
            	if(deviceBrand.equals("NOTPASS"))
				{
        			SignUp.NotPassdeviceBrand(email, password, deviceId, pin, i, URL);
        			continue;
				}
            	
            	//Posting the request
				BasicConfigurator.configure();
				Response resp1=	RestAssured.
					given().
					relaxedHTTPSValidation().
					contentType(ContentType.JSON).
					accept(ContentType.JSON).
					queryParam("email",email).
					queryParam("password",password).
					queryParam("deviceId",deviceId).
					queryParam("deviceBrand",deviceBrand).
					queryParam("pin",pin).
					when().
					post(URL);
				
				
				resp1.prettyPrint();//printing the response
				resp1.then().assertThat().statusCode(200);//Checking the status code
				
				if(TestType.equals("Positive")) //Logic for positive TC
				{
					String[] Keys = key2test.split(",");
					for (int j=0; j < Keys.length; j++)
					{
						resp1.then().body(Keys[j], is(IsNull.notNullValue()));
						
					}
				}
				else //Logic for negative TC
				{
					str=resp1.then().extract().path(key2test);
					softAssert.assertEquals(Value2test,str);
				}
				
				//code to write the output and status code in excel
				FileInputStream fis1=new FileInputStream(path1);
				Workbook wb1=WorkbookFactory.create(fis1);
		
				Sheet sh1=wb1.getSheet("SignUp");
				Row row1=sh1.getRow(i);
				row1.createCell(10);
				Cell cel1=row1.getCell(10, MissingCellPolicy.CREATE_NULL_AS_BLANK);
				cel1.setCellType(CellType.STRING);
				cel1.setCellValue(resp1.asString());
		
				Row row3=sh1.getRow(i);
				row3.createCell(11);
				Cell cel3=row3.getCell(11, MissingCellPolicy.CREATE_NULL_AS_BLANK);
				if(TestType.equals("Positive")) //Logic for writing pass/fail for positive TC
				{
					String[] Keys = key2test.split(",");
					for (int j=0; j < Keys.length; j++)
					{
						resp1.then().body(Keys[j], is(IsNull.notNullValue()));
						
					}
					cel3.setCellValue("Pass");
				}
				else if(TestType.equals("Negative")) ////Logic for writing pass/fail for negative TC
				{	
					if(str.equals(Value2test) )
					{
						cel3.setCellValue("Pass");
					}
					else 
					{
						cel3.setCellValue("Fail");
					}
				}
				else
				{
					cel3.setCellValue("Fail");
				}

				
				FileOutputStream fos=new FileOutputStream(path1);
				wb1.write(fos);
		
				fos.close();
				
		}
	    GenericMethod.write2Master(1, "SignUp", 11);
	    softAssert.assertAll();
	    
	    
	}
	//Funtion for not passing email 
	public static void NotPassEmail(String password,String deviceId,String deviceBrand, String pin,int i,String URL) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		BasicConfigurator.configure();
		Response resp1=	RestAssured.
			given().
			relaxedHTTPSValidation().
			contentType(ContentType.JSON).
			accept(ContentType.JSON).
			queryParam("password",password).
			queryParam("deviceId",deviceId).
			queryParam("deviceBrand",deviceBrand).
			queryParam("pin",pin).
			when().
			post(URL);
		
		resp1.then().assertThat().statusCode(200);
		str=resp1.then().extract().path(key2test);
		softAssert.assertEquals(Value2test,str);
		GenericMethod.writedata(i, Value2test,TestType, resp1,str,10,11,"SignUp");
	}
	//Funtion for not passing password
	public static void NotPassPassword(String email,String deviceId,String deviceBrand, String pin,int i,String URL) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		BasicConfigurator.configure();
		Response resp1=	RestAssured.
			given().
			relaxedHTTPSValidation().
			contentType(ContentType.JSON).
			accept(ContentType.JSON).
			queryParam("email",email).
			queryParam("deviceId",deviceId).
			queryParam("deviceBrand",deviceBrand).
			queryParam("pin",pin).
			when().
			post(URL);
		
		resp1.then().assertThat().statusCode(200);
		str=resp1.then().extract().path(key2test);
		softAssert.assertEquals(Value2test,str);
		GenericMethod.writedata(i, Value2test,TestType, resp1,str,10,11,"SignUp");
	}
	//Function for not passing deviceId
	public static void NotPassdeviceId(String email,String password,String deviceBrand, String pin,int i,String URL) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		BasicConfigurator.configure();
		Response resp1=	RestAssured.
			given().
			relaxedHTTPSValidation().
			contentType(ContentType.JSON).
			accept(ContentType.JSON).
			queryParam("email",email).
			queryParam("password",password).
			queryParam("deviceBrand",deviceBrand).
			queryParam("pin",pin).
			when().
			post(URL);
		
		resp1.then().assertThat().statusCode(200);
		str=resp1.then().extract().path(key2test);
		softAssert.assertEquals(Value2test,str);
		GenericMethod.writedata(i, Value2test,TestType, resp1,str,10,11,"SignUp");
	}
	//Function for not passing devicebrand
	public static void NotPassdeviceBrand(String email,String password,String deviceId, String pin,int i,String URL) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		BasicConfigurator.configure();
		Response resp1=	RestAssured.
			given().
			relaxedHTTPSValidation().
			contentType(ContentType.JSON).
			accept(ContentType.JSON).
			queryParam("email",email).
			queryParam("password",password).
			queryParam("deviceId",deviceId).
			queryParam("pin",pin).
			when().
			post(URL);
		
		resp1.then().assertThat().statusCode(200);
		str=resp1.then().extract().path(key2test);
		softAssert.assertEquals(Value2test,str);
		GenericMethod.writedata(i, Value2test,TestType, resp1,str,10,11,"SignUp");
	}
	//Function for passing empty pin
	public static void emptyPin(String email,String password,String deviceId, String deviceBrand,int i,String URL) throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		BasicConfigurator.configure();
		Response resp1=	RestAssured.
			given().
			relaxedHTTPSValidation().
			contentType(ContentType.JSON).
			accept(ContentType.JSON).
			queryParam("email",email).
			queryParam("password",password).
			queryParam("deviceId",deviceId).
			queryParam("deviceBrand",deviceBrand).
			when().
			post(URL);
		
		resp1.then().assertThat().statusCode(200);
		str=resp1.then().extract().path(key2test);
		softAssert.assertEquals(Value2test,str);
		GenericMethod.writedata(i, Value2test,TestType, resp1,str,10,11,"SignUp");
	}
}
